#!/usr/bin/env bash

#
# ARG_OPTIONAL_BOOLEAN([withTests],[],[Run tests as part of the build],[])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

begins_with_short_option()
{
  local first_option all_short_options
  all_short_options=''
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_withtests=off

print_help ()
{
  printf 'Usage: %s [--(no-)withTests]\n' "$0"
  printf "\t%s\n" "--withTests,--no-withTests: Run tests as part of the build (off by default)"
}

parse_commandline ()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --no-withTests|--withTests)
        _arg_withtests="on"
        test "${1:0:5}" = "--no-" && _arg_withtests="off"
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

set -e

if [ $_arg_withtests = "on" ]
then
  echo 'Running tests ...'
  # Must install dev dependencies here as well
  # CI flag is important, avoids entering watch mode
  yarn install --production=false && CI=true yarn test
fi

# REPOSITORY_URL: URL to the Git repository the build pulls changes from.
# BRANCH: Reference to check out after fetching changes from the Git repository.
# PULL_REQUEST: Whether the build is from a pull request or not.
# HEAD: Name of the head branch received from a Git provider.
# COMMIT_REF: Reference of the commit weâ€™re building.
# CONTEXT: Name of the context a deploy is built around, it can be production, deploy-preview or branch-deploy.
# URL: This URL represents the main address to your site. It can be either a netlify subdomain or your own custom domain if you set one. For example, https://example.netlify.com or https://www.example.com.
# DEPLOY_URL: This URL represents the unique URL for an individual deploy. It starts with a unique ID that identifies the deploy. For example, https://578ab634d6865d5cf960d620--open-api.netlify.com.
# DEPLOY_PRIME_URL: This URL represents the primary URL for an individual deploy, or a group of them, like branch deploys and deploy previews. For example, https://deploy-preview-34--open-api.netlify.com or https://beta--open-api.netlify.com.

echo 'Mapping Netlify build env vars to create-react-app, and running build ...'
set -x
REACT_APP_REPOSITORY_URL="$REPOSITORY_URL" \
REACT_APP_BRANCH="$BRANCH" \
REACT_APP_PULL_REQUEST="$PULL_REQUEST" \
REACT_APP_HEAD="$HEAD" \
REACT_APP_COMMIT_REF="$COMMIT_REF" \
REACT_APP_CONTEXT="$CONTEXT" \
REACT_APP_URL="$URL" \
REACT_APP_DEPLOY_URL="$DEPLOY_URL" \
REACT_APP_DEPLOY_PRIME_URL="$DEPLOY_PRIME_URL" \
yarn build
